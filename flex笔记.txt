父容器为弹性盒子
伸缩容器中的属性
display:flex

flex-wrap:nowrap不换行/wrap（放不下）自动换行，不是等比压缩/
wrap-reverse(放不下就换行，以行为单位进行反转)

align-content用于设置换行之后的对齐方式的，
只有伸缩项发生了换行这个属性才有效
align-content:flex-start换行之后和侧轴的起点对齐，一行接一行
flex-end换行之后和侧轴的终点对齐，将所有的换行之后的内容当作整体来操作
center换行之后和侧轴的中点对齐
space-between换行之后在侧轴上两端对齐
space-around换行之后在侧轴上环绕对齐
stretch以行为单位进行拉伸，拉伸的部分以空白填充，
保证拉伸之后所有的行加起来能够填满侧轴

主轴方向
flex-direction:row/row-reverse/colum/colum-reverse
对齐方式
justify-content:flex-start/flex-end/center/space-between/space-around

侧轴对齐方式
baseline:让所有伸缩项中的基线在一条直线上对齐
stretch（拉伸对齐/等高对齐）
align-items:flex-start/flex-end/center/baseline


伸缩项属性
子容器
align-self:flex-end/flex-end/center/baseline

order
默认情况下，每一个伸缩项都有一个order属性，用于决定排序的先后顺序
默认情况下所有伸缩项的order属性的取值都是0
我们可以通过修改order属性的取值来实现伸缩项排序
order排序的规则：从小到大的排序，越小的显示在越前面，越大的显示在越后面

flex-grow:0
在伸缩项中有一个flex-grow属性，用于控制当所有伸缩项的宽度小于伸缩容器宽度
的时候如何扩充自己，以便于所有伸缩项宽度总和能够填满整个伸缩容器

flex-grow扩充的公式
利用伸缩容器宽度-所有伸缩项的宽度=剩余空间

利用剩余空间/所有需要扩充份数的总和=每一份的大小

利用当前伸缩项的宽度+需要份数的宽度

flex-shrink
flex-shrink取值是1，表示当所有伸缩项宽度的总和大于伸缩容器宽度的时候
等比缩小自己

在伸缩项中有一个flex-grow属性，用于控制当所有伸缩项的宽度大于伸缩容器宽度
的时候如何缩小自己，以便于所有伸缩项宽度总和能够填满整个伸缩容器

flex-shrink缩小的公式
利用所有伸缩项的宽度总和-伸缩容器的宽度=溢出的宽度
计算权重值
利用每一个伸缩项需要的份数*当前伸缩项的宽度 然后再相加
计算每个伸缩项需要缩小的范围
溢出的宽度*当前伸缩项的宽度*当前伸缩项需要的份数/权重值


flex-shrink/flex-grow默认值都是0不缩小也不扩充
也有可能扩充和缩小高度，取决于主轴
如果主轴是水平方向，扩充和缩小是宽度
如果主轴是垂直方向，扩充和缩小是高度


flex-basis:在伸缩布局中可以通过flex-basis属性设置伸缩项的宽度
只有在伸缩布局中才有效
在伸缩布局中如果通过flex-basis设置了宽度，那么width设置宽度就会无效
flex-basis的优先级要高于width的优先级
在伸缩布局中如果同时通过flex-basis和width设置了宽度，而且一个设置的是
auto，一个设置的是具体的值，那么会按照具体的值来显示。


flex:扩充 缩小 宽度
flex默认值
flex:0 1 auto








